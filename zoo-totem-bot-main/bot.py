import smtplib
from email.mime.text import MIMEText
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile, InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = '7648005239:AAERMWHzmb7z9v0n-ULfBXWBBE5PashIRUg'
SMTP_SERVER = "smtp.yandex.ru"
SMTP_PORT = 587
SENDER_EMAIL = "dan.brylev@yandex.ru"
SENDER_PASSWORD = "zozpgugjdvjpgify"
RECIPIENT_EMAIL = "dan.brylev@yandex.ru"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

quiz = [
    {
        "q": "–ì–¥–µ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –≤—Å–µ–≥–æ?",
        "a": [
            ("–í –≥–æ—Ä–∞—Ö", "–±–∞—Ä–∞–Ω"),
            ("–í –ª–µ—Å—É", "–º–µ–¥–≤–µ–¥—å"),
            ("–í –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ", "—Ç–∏–≥—Ä"),
            ("–°—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π", "—Å–ª–æ–Ω"),
            ("–í —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è", "–ø–æ–ø—É–≥–∞–π"),
            ("–¢–∞–º, –≥–¥–µ —Ç–µ–ø–ª–æ –∏ —É—é—Ç–Ω–æ", "–∞–ª—å–ø–∞–∫–∞"),
            ("–í —Å—Ç–∞–µ", "–≤–æ–ª–∫")
        ]
    },
    {
        "q": "–ö–∞–∫ —Ç—ã —Ä–µ—à–∞–µ—à—å –ø—Ä–æ–±–ª–µ–º—ã?",
        "a": [
            ("–õ–æ–≥–∏–∫–æ–π", "—Å–ª–æ–Ω"),
            ("–ù–∞–ø–æ—Ä–æ–º", "—Ç–∏–≥—Ä"),
            ("–°–æ–≤–µ—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏", "–≤–æ–ª–∫"),
            ("–¢–µ—Ä–ø–µ–ª–∏–≤–æ", "–º–µ–¥–≤–µ–¥—å"),
            ("–° –∏—Ä–æ–Ω–∏–µ–π", "–ø–æ–ø—É–≥–∞–π"),
            ("–£–µ–¥–∏–Ω—è—é—Å—å", "–±–∞—Ä–∞–Ω"),
            ("–ü—å—é —á–∞–π", "–∞–ª—å–ø–∞–∫–∞")
        ]
    },
    {
        "q": "–ö–∞–∫–∞—è –µ–¥–∞ —Ç–µ–±–µ –±–ª–∏–∂–µ?",
        "a": [
            ("–§—Ä—É–∫—Ç—ã –∏ –∑–µ–ª–µ–Ω—å", "—Å–ª–æ–Ω"),
            ("–ú—è—Å–æ", "—Ç–∏–≥—Ä"),
            ("–†—ã–±–∞", "–º–µ–¥–≤–µ–¥—å"),
            ("–ú–æ—Ä–∫–æ–≤–∫–∞ –∏ —Ç—Ä–∞–≤—ã", "–∞–ª—å–ø–∞–∫–∞"),
            ("–ó–ª–∞–∫–∏", "–±–∞—Ä–∞–Ω"),
            ("–û—Ä–µ—Ö–∏, —Å–µ–º–µ—á–∫–∏", "–ø–æ–ø—É–≥–∞–π"),
            ("–ú—è—Å–æ (–æ–ø—è—Ç—å?)", "–≤–æ–ª–∫")
        ]
    },
    {
        "q": "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ?",
        "a": [
            ("–°–µ–º—å—è", "—Å–ª–æ–Ω"),
            ("–°–≤–æ–±–æ–¥–∞", "—Ç–∏–≥—Ä"),
            ("–ö–æ–º–∞–Ω–¥–∞", "–≤–æ–ª–∫"),
            ("–í–µ—Å–µ–ª—å–µ", "–ø–æ–ø—É–≥–∞–π"),
            ("–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "–º–µ–¥–≤–µ–¥—å"),
            ("–ì–∞—Ä–º–æ–Ω–∏—è", "–∞–ª—å–ø–∞–∫–∞"),
            ("–¢–∏—à–∏–Ω–∞", "–±–∞—Ä–∞–Ω")
        ]
    }
]

user_answers = {}

def send_email(subject, body):
    msg = MIMEText(body)
    msg["Subject"] = subject
    msg["From"] = SENDER_EMAIL
    msg["To"] = RECIPIENT_EMAIL
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üêæ"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üêæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∑–æ–æ–ø–∞—Ä–∫!\n\n–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?", reply_markup=keyboard)

@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer(
        "ü¶Å *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –æ–ø–µ–∫–∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞.\n\n"
        "üìå –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üêæ¬ª –∏ —á–µ—Å—Ç–Ω–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "üêæ –í –∫–æ–Ω—Ü–µ —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫—Ç–æ —Ç—ã –≤ –º–∏—Ä–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö, —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± –æ–ø–µ–∫–µ –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏!",
        parse_mode="Markdown"
    )

@dp.message_handler(lambda msg: msg.text == "–ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üêæ")
async def start_quiz(message: types.Message):
    user_answers[message.from_user.id] = {"step": 0, "score": {}}
    await send_question(message.from_user.id)

async def send_question(user_id):
    data = user_answers.get(user_id)
    if not data:
        return
    step = data["step"]
    if step >= len(quiz):
        await show_result(user_id)
        return
    question = quiz[step]
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for text, _ in question["a"]:
        keyboard.add(KeyboardButton(text))
    await bot.send_message(user_id, f"‚ùì {question['q']}", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑")
async def restart_quiz(message: types.Message):
    user_answers[message.from_user.id] = {"step": 0, "score": {}}
    await send_question(message.from_user.id)

@dp.message_handler()
async def handle_answer(message: types.Message):
    data = user_answers.get(message.from_user.id)
    if not data:
        await message.answer("–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
        return
    step = data["step"]
    if step >= len(quiz):
        await show_result(message.from_user.id)
        return
    question = quiz[step]
    answer_text = message.text
    for text, animal in question["a"]:
        if text == answer_text:
            data["score"][animal] = data["score"].get(animal, 0) + 1
            data["step"] += 1
            await send_question(message.from_user.id)
            return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏ üëá")

async def show_result(user_id):
    data = user_answers.get(user_id)
    if not data or not data["score"]:
        await bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòì –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    scores = data["score"]
    top_animal = max(scores, key=scores.get)
    descriptions = {
        "—Å–ª–æ–Ω": "üêò –¢—ã ‚Äî –∞–∑–∏–∞—Ç—Å–∫–∏–π —Å–ª–æ–Ω! –ú—É–¥—Ä—ã–π –∏ —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω—ã–π.",
        "–∞–ª—å–ø–∞–∫–∞": "ü¶ô –¢—ã ‚Äî –∞–ª—å–ø–∞–∫–∞! –î–æ–±—Ä–æ–¥—É—à–Ω—ã–π, —Ç—ë–ø–ª—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ –¥–µ—Ä–∑–∫–∏–π üòâ",
        "–ø–æ–ø—É–≥–∞–π": "ü¶ú –¢—ã ‚Äî –∞–ª–µ–∫—Å–∞–Ω–¥—Ä–∏–π—Å–∫–∏–π –ø–æ–ø—É–≥–∞–π! –Ø—Ä–∫–∏–π, —à—É–º–Ω—ã–π –∏ —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π.",
        "—Ç–∏–≥—Ä": "üêÖ –¢—ã ‚Äî –∞–º—É—Ä—Å–∫–∏–π —Ç–∏–≥—Ä! –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π, —Å–∏–ª—å–Ω—ã–π –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π.",
        "–º–µ–¥–≤–µ–¥—å": "üêª –¢—ã ‚Äî –±—É—Ä—ã–π –º–µ–¥–≤–µ–¥—å! –¢–µ—Ä–ø–µ–ª–∏–≤—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π, –Ω–æ –º–æ–∂–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–≥—Ç–∏.",
        "–±–∞—Ä–∞–Ω": "üêè –¢—ã ‚Äî –≥–æ–ª—É–±–æ–π –±–∞—Ä–∞–Ω! –°–ø–æ–∫–æ–π–Ω—ã–π, –≤—ã–Ω–æ—Å–ª–∏–≤—ã–π –∏ —Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤—ã–π.",
        "–≤–æ–ª–∫": "üê∫ –¢—ã ‚Äî –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –≤–æ–ª–∫! –£–º–Ω—ã–π, –ø—Ä–µ–¥–∞–Ω–Ω—ã–π –∏ –æ—Ç–ª–∏—á–Ω—ã–π –∫–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫."
    }
    result_text = descriptions.get(top_animal, "ü§î –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
    try:
        photo = InputFile(f"images/{top_animal}.jpg")
        await bot.send_photo(user_id, photo, caption=result_text)
    except Exception:
        await bot.send_message(user_id, result_text)
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –æ–± –æ–ø–µ–∫–µ üêæ", url="https://moscowzoo.ru/about/guardianship"),
        InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑ üîÅ", callback_data="restart"),
        InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ ‚úçÔ∏è", callback_data="feedback"),
        InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º üì©", callback_data="contact"),
    )
    keyboard.add(
        InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", switch_inline_query="–•–æ—á—É —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ! üêæ")
    )
    await bot.send_message(user_id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    user_answers[user_id] = {"step": 0, "score": {}}

@dp.callback_query_handler(lambda call: call.data == "restart")
async def restart_from_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    user_answers[callback_query.from_user.id] = {"step": 0, "score": {}}
    await send_question(callback_query.from_user.id)

@dp.callback_query_handler(lambda call: call.data == "feedback")
async def feedback_from_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if callback_query.from_user.id not in user_answers:
        user_answers[callback_query.from_user.id] = {"step": 0, "score": {}}
    user_answers[callback_query.from_user.id]["waiting_feedback"] = True
    await bot.send_message(callback_query.from_user.id, "‚úç –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")

@dp.callback_query_handler(lambda call: call.data == "contact")
async def contact_from_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üì© –ù–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!\n–ò–ª–∏ –ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: @daniilbrylev")

@dp.message_handler(lambda message: user_answers.get(message.from_user.id, {}).get("waiting_feedback"))
async def receive_feedback(message: types.Message):
    user_answers[message.from_user.id]["waiting_feedback"] = False
    await bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É.")
    feedback_text = f"–û—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username or message.from_user.id}:\n\n{message.text}"
    send_email(subject="–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –∏–∑ –±–æ—Ç–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞", body=feedback_text)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)